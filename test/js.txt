/*
 * comment
 */

"use strict"
'use strict'

import foo from '../foo';

// comment
const a = 0;
let b = 1;
var c = 2; // comment

// number test
[1, 0.1, .1]
[-1, -0.1, -.1]
[+1, +0.1, +.1]
[0b10010, 0B10010]
[0o600, 0O600, 0600]
[0x00f, 0X00F]
[3e5, 3e+5, 3e-5]
[99999999999999999999n]
[1_000_000, 0b00_00_00, 0o00_00, 0x00_ff]

// string test
"aaa" "aa'a" "aa\"a"
'aaa' 'aa"a' 'aa\'a'
`aaa` `aa
a` `aa\`a`

// reserved words as object property test
class FooClass {}
const foo = new FooClass;
foo.class = 1;
foo.bar = {class: 0};
foo.baz = {
    get: function() {},
    set: function() {},
    get foo: function() {},
    set foo: function() {}
};

// object property test
window.foo = {
    key: 'value',
    '#': 4,
    "@": true,
    [foo.toString()]: ""
};

// object shorthand test
{foo, bar, baz, qux: 1}

// function test
function foo(a, b, c = 4) {
    return a + b + c;
}

function bar(
    a, // comment 1
    b, // comment 2
    c = 4 /* comment 3 */
) {}

foo('a', true, 1);

// function call test
bar = bar.replace(/[^a-z-]+/g, '-').replace(/^-+|-+$/g, "");

// class and method test
interface FooInterface {
    bar() {}
    baz() {}
    toString() {}
}

class Foo implements FooInterface {
    constructor() {
        this.foo = 1;
        this.bar = 'baz';
    }
    bar() {
        return this.bar;
    }
    baz() {
        return undefined;
    }
    toString() {
        return `foo bar ${baz + 1}`;
    }
}

class Bar extends Foo {
    constructor() {
        super()
    }
}

// JSX test
class Button extends React.Component {
    render() {
        return <button>{text}</button>
    }
}

const button = new Button;

export default Button;
