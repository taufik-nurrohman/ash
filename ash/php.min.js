(e=>{let t="(?:[a-zA-Z_\\x7f-\\xff][a-zA-Z\\d_\\x7f-\\xff]*)",n="(?:\\\\?"+t+"(?:\\\\"+t+")*)",s="(?:"+["(?:Append|Array|Caching|CallbackFilter|Directory|Empty|Filesystem|Filter|Glob|Infinite|Iterator|Limit|Multiple|NoRewind|Outer|Parent|Recursive(?:Array|Caching|Callback|Directory|Filter|Iterator|Regex|Tree)?|Regex|Seekable)?Iterator","(?:ArgumentCount|Arithmetic|Assertion|Compile|DivisionByZero|Parse|Type)?Error","Array(?:Access|Object)","(?:Bad(?:Function|Method)Call|Domain|Error|InvalidArgument|Length|Logic|OutOf(?:Bounds|Range)|(?:Over|Under)flow|Range|Runtime|UnexpectedValue)?Exception","Countable","Spl(?:DoublyLinkedList|File(?:Info|Object)|FixedArray|(?:Max|Min)?Heap|ObjectStorage|Observer|(?:Priority)?Queue|Stack|Subject|TempFileObject)","Closure","Generator","IteratorAggregate","Serializable","Throwable","Traversable","WeakReference","Directory","__PHP_Incomplete_Class","parent","php_user_filter","self","static","stdClass"].join("|")+")",r="(?:"+["die","echo","exit","(?:include|require)(?:_once)?","print","array","abstract","and","as","binary","bool(?:ean)?","break","callable","case","catch","class","clone","const","continue","(?:end)?declare","default","do","double","else","elseif","empty","eval","extends","final(?:ly)?","float","fn","(?:end)?for(?:each)?","from","function","global","goto","(?:end)?if","implements","inst(?:ance|ead)of","int(?:eger)?","interface","isset","iterable","list","match","namespace","new","object","or","private","protected","public","real","return","string","(?:end)?switch","throw","trait","try","unset","use","var","void","(?:end)?while","xor","yield"].join("|")+")",a="class|extends|implements|interface|new|trait|use",o=[["/\\*[\\s\\S]*?\\*/",["com.s0"]],["(__halt_compiler)(\\s*)(\\()(\\s*)(\\))(;?)([\\s\\S]*?)$",[0,"fun.lib",0,"pun",0,"pun","pun","com.s3"]],["//[^\\n]+",["com.s1"]],["#[^\\n]+",["com.s2"]],["(<<<)([A-Z_][A-Z\\d_]*)([\\s\\S]*?)(\\2)",["str.s3"]],['(<<<)(")([A-Z_][A-Z\\d_]*)(")([\\s\\S]*?)(\\3)',["str.s3"]],["(<<<)(')([A-Z_][A-Z\\d_]*)(')([\\s\\S]*?)(\\3)",["str.s4"]],[e.STR,e=>["str.s"+({'"':0,"'":1,"`":2}[e[0][0]]||0)]],[e.LOG,["log.s0"]],["\\b(?:FALSE|NULL|TRUE)\\b",["log.s1"]],[e.NUM,["num"]],["(-)(>)("+t+")",[0,"pun","pun","key"]],["(\\$+"+t+")(:)(:)("+t+")",[0,"var","pun","pun","con"]],["\\$+"+t,["var"]],["\\b(as)(\\s+)("+n+")\\b",[0,"wor",0,"nam"]],["\\b(const)(\\s+)("+n+")\\b",[0,"wor",0,"con"]],["\\b(function)(\\s+)("+n+")\\b",[0,"wor",0,"fun"]],["\\b(namespace)(\\s+)("+n+")\\b",[0,"wor",0,"nam"]],["\\b("+a+")(\\s+)("+s+")\\b",[0,"wor",0,"cla.lib"]],["\\b(use)(\\s+)(const)(\\s+)("+n+")\\b",[0,"wor",0,"wor",0,"con"]],["\\b(use)(\\s+)(function)(\\s+)("+n+")\\b",[0,"wor",0,"wor",0,"fun"]],["\\b("+a+")(\\s+)("+n+")\\b",[0,"wor",0,"cla"]],["\\b("+r+")(\\s*)(\\()",[0,"wor",0,"pun"]],["\\b("+n+")(\\s*)(\\()",[0,"fun",0,"pun"]],["\\b("+n+")(:)(:)("+t+")",[0,"cla","pun","pun","con"]],["\\b"+r+"\\b",["wor"]],["\\b"+s+"\\b",["cla.lib"]],["\\b__(?:"+["CLASS","COMPILER_HALT_OFFSET","DIR","FILE","FUNCTION","LINE","METHOD","NAMESPACE","TRAIT"].join("|")+")__\\b",["con.lib"]],[e.PUN,["pun"]],["\\b"+n+"\\b",["con"]]],l=["(<\\?(?:php(?=\\s)|=)?)([\\s\\S]*?)(\\?>)",["t:php","typ",o,"typ"]];e.token.php=(t=>{let n=["(\\s+)([^\\s<>=/]+)(?:(=)("+e.STR+"|[^\\s<>=/]+))?",[0,0,"key","pun","val"]],s=["(<)([^\\s<>/]+)(\\s[^>]*?)?(/)?(>)",["mar","pun","nam",[n],"pun","pun"]],r=["(<)(/)([^\\s<>/]+)(>)",["mar","pun","pun","nam","pun"]];return/<\?(?:php(?=\\s)|=)?/.test(t)?[["(<script(?:\\s[^>]*)?>)([\\s\\S]*?)(<\/script>)",[0,[s],"t:js",[r]]],["(<style(?:\\s[^>]*)?>)([\\s\\S]*?)(</style>)",[0,[s],"t:css",[r]]],["(<template(?:\\s[^>]*)?>)([\\s\\S]*?)(</template>)",[0,[s],"val",[r]]],["(<textarea(?:\\s[^>]*)?>)([\\s\\S]*?)(</textarea>)",[0,[s],"val",[r]]],["(<(?:<\\?[\\s\\S]*?\\?>|[^<>!?])+>)",["mar",[["^"+s[0]+"$",[0,"pun","nam",[n],"pun","pun"]],["^"+r[0]+"$",[0,"pun","pun","nam","pun"]],n,["^(<)([^\\s<>/?]+)",[0,"pun","nam"]],l,[e.STR,["val"]],[e.PUN,["pun"]]]]],["(<\\?(?:php(?=\\s)|=)?)([\\s\\S]*?)(\\?>|$)",["t:php","typ",o,"typ"]],["\x3c!--[\\s\\S]*?--\x3e",["com"]],["(<!\\[CDATA\\[)([\\s\\S]*)(\\]\\]>)",[0,"typ","val","typ"]],["<![^<>]+>",["typ"]],["<\\?xml\\s+[\\s\\S]+\\?>",["typ"]],s,r,["&(?:[a-zA-Z\\d]+|#x[a-fA-F\\d]+|#\\d+);",["sym"]]]:o})})(ASH);
